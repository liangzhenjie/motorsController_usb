#ifndef MOTORSCONTROLLER_H
#define MOTORSCONTROLLER_H

#include "motorscontroll_global.h"
#include <functional>
#include <vector>
#include "mediator.h"
using namespace  std;

#define requestCallback  function<void (uint8_t,uint8_t,double)>

class MOTORSCONTROLLSHARED_EXPORT MotorsController
{

public:
    MotorsController(requestCallback callBack);
    ~MotorsController(){}
    void autoRecoginze();

    vector<uint8_t> getMotorIdArray()const;
    void activeMotorsMode(vector<uint8_t> idArray, const MotorData::Motor_Mode nMode);
    void launchAllMotors();
    void switchAutoRefresh(vector<uint8_t> idArray,bool bOpen);
    void setAutoRefreshInterval(vector<uint8_t> idList,uint32_t mSec);
    void setPosition(uint8_t id,double pos);
    void setVelocity(uint8_t id,double vel);
    void setCurrent(uint8_t id,double current);
    double getPosition(uint8_t id,bool bRefresh=false)const;
    double getVelocity(uint8_t id,bool bRefresh=false)const;
    double getCurrent(uint8_t id,bool bRefresh=false)const;
    void setMotorAttribute(uint8_t id,MotorData::Motor_Data_Id attrId,double value);
    double getMotorAttribute(uint8_t id,MotorData::Motor_Data_Id attrId)const;
private:
    void finishRecognizeCallback();
    vector<uint8_t> convertQListToVector(const QList<quint8> &qList)const;
    QList<quint8> convertVectorToQList(const vector<uint8_t> &cVector)const;
private:
    requestCallback m_requestCallback;
};

#endif // MOTORSCONTROLLER_H
